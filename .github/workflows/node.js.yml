# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

# Configure matrix entries here as a JSON array string. Update this to change
# the compatibility matrix without editing the jobs below.
# Example: keep majors and also add an exact pinned version:
#   MATRIX_NODE_VERSIONS: '["18.x","20.x","21.x","22.x","22.21.0"]'
env:
  MATRIX_NODE_VERSIONS: '["18.x", "20.x", "21.x", "22.x"]'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  assert_matrix:
    name: Assert pinned Node is covered by compatibility matrix
    runs-on: ubuntu-latest
    outputs:
      covered: ${{ steps.check.outputs.covered }}
    steps:
      - uses: actions/checkout@v4

      - name: Read pinned Node version from package.json
        id: read_pin
        run: |
          NODE_PIN=$(python -c "import json,sys; print(json.load(open('package.json')).get('volta', {}).get('node', ''))")
          if [ -z "$NODE_PIN" ]; then echo "volta.node not found in package.json"; exit 1; fi
          echo "PIN=$NODE_PIN" >> $GITHUB_ENV
      - name: Check coverage
        id: check
        run: |
          # Write a small Python script using a single-quoted here-doc to avoid shell quoting issues
          cat > _check_matrix.py <<'PY'
          import os, json, sys

          pin = os.environ.get('PIN')
          if not pin:
              print('volta.node not found in package.json', file=sys.stderr)
              sys.exit(1)

          entries = json.loads(os.environ.get('MATRIX_NODE_VERSIONS', '[]'))
          pin_major = pin.split('.')[0]

          covered = any(
              entry == pin
              or (isinstance(entry, str) and entry.endswith('.x') and entry.split('.')[0] == pin_major)
              for entry in entries
          )

          if covered:
              print('covered=true')
              sys.exit(0)

          print(f'ERROR: pinned node {pin} is NOT covered by compatibility matrix (entries: {entries})', file=sys.stderr)
          sys.exit(2)
          PY

          python _check_matrix.py

  compatibility:
    name: Compatibility matrix
    runs-on: ubuntu-latest
    needs: assert_matrix
    strategy:
      matrix:
        # GitHub doesn't allow using env.* inside the strategy.matrix expression.
        # Use an explicit list here. Update this list if you want to change the matrix.
        node-version:
          - '18.x'
          - '20.x'
          - '21.x'
          - '22.x'
    steps:
      - uses: actions/checkout@v4

      - name: "Debug: print configured MATRIX_NODE_VERSIONS"
        run: |
          echo "MATRIX_NODE_VERSIONS = $MATRIX_NODE_VERSIONS"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Verify Node
        run: |
          node -v

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test

  pinned:
    name: Pinned node from package.json
    runs-on: ubuntu-latest
    needs: assert_matrix
    steps:
      - uses: actions/checkout@v4

      - name: Read pinned Node version from package.json
        id: node_pin
        run: |
          NODE_PIN=$(python -c "import json,sys; print(json.load(open('package.json')).get('volta', {}).get('node', ''))")
          if [ -z "$NODE_PIN" ]; then echo "volta.node not found in package.json"; exit 1; fi
          echo "version=$NODE_PIN" >> $GITHUB_OUTPUT

      - name: "Debug: print resolved pinned Node version"
        run: |
          echo "Pinned Node (from package.json volta): ${{ steps.node_pin.outputs.version }}"

      - name: Setup Node.js (pinned)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_pin.outputs.version }}
          cache: 'npm'

      - name: Verify Node
        run: |
          node -v

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test
